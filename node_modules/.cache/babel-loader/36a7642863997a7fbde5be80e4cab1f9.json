{"ast":null,"code":"var path = require('path');\n\nCOMPILED = false;\nvar closureBasePath = path.join(__dirname, '/closure/goog/');\n\nvar goog = require('closure').Closure({\n  CLOSURE_BASE_PATH: closureBasePath\n});\n\ngoog.require('goog.array');\n\ngoog.require('goog.proto2.PbLiteSerializer');\n\ngoog.require('goog.string');\n\ngoog.require('goog.string.StringBuffer');\n\ngoog.require('goog.json');\n\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/phonemetadata.pb.js');\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/phonenumber.pb.js');\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/metadata.js');\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/phonenumberutil.js');\nvar phonenumbers = goog.global.i18n.phonenumbers;\nvar phoneUtil = phonenumbers.PhoneNumberUtil.getInstance();\nvar PhoneNumber = phonenumbers.PhoneNumber;\nvar PhoneNumberFormat = phonenumbers.PhoneNumberFormat;\nvar ValidationResult = phonenumbers.PhoneNumberUtil.ValidationResult;\nvar ValidationErrors = phonenumbers.Error;\n\nvar validateNumber = function (number, countryCode) {\n  var error = null;\n  var result = null; // Strip out everything that's not a phone number.\n\n  if (number) {\n    var potentialPhoneNumber = number.toString();\n    potentialPhoneNumber = potentialPhoneNumber.replace(/[^\\+0-9]/, ''); // E164 format numbers start with a plus sign.  If you have a plus sign\n    // anywhere else, this is not a phone number.  If you don't have a plus\n    // sign yet, don't worry, we'll give you one.\n\n    if (potentialPhoneNumber.lastIndexOf('+') <= 0) {\n      try {\n        potentialPhoneNumber = phoneUtil.parse(potentialPhoneNumber, countryCode);\n        var quickReason = phoneUtil.isPossibleNumberWithReason(potentialPhoneNumber);\n\n        if (quickReason !== ValidationResult.IS_POSSIBLE) {\n          for (var code in ValidationResult) {\n            if (ValidationResult[code] === quickReason) {\n              error = new Error(ValidationErrors[code]);\n            }\n          }\n\n          if (error === null) {\n            error = new Error('Invalid number (unspecified reason)');\n          }\n        } else {\n          if (phoneUtil.isValidNumber(potentialPhoneNumber)) {\n            result = potentialPhoneNumber;\n          } else {\n            error = new Error('Invalid number');\n          }\n        }\n      } catch (e) {\n        error = e;\n      }\n    } else {\n      error = new Error('Not a phone number');\n    }\n  } else {\n    error = new Error('No number given');\n  }\n\n  if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n};\n\nvar formatNumber = function (number, countryCode, numberFormat, callback) {\n  var error = null;\n  var result = null;\n\n  try {\n    var validNumber = validateNumber(number, countryCode);\n    result = phoneUtil.format(validNumber, numberFormat);\n  } catch (e) {\n    error = e;\n  }\n\n  if (callback) {\n    callback(error, result);\n  } else if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n};\n\nvar validate = function (number, countryCode, callback) {\n  var error = null;\n  var result = null;\n\n  try {\n    var validNumber = validateNumber(number, countryCode);\n    result = validNumber instanceof PhoneNumber;\n  } catch (e) {\n    error = e;\n  }\n\n  if (callback) {\n    callback(error, result);\n  } else if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n};\n\nvar e164 = function (number, countryCode, callback) {\n  return formatNumber(number, countryCode, PhoneNumberFormat.E164, callback);\n};\n\nvar intl = function (number, countryCode, callback) {\n  return formatNumber(number, countryCode, PhoneNumberFormat.INTERNATIONAL, callback);\n};\n\nvar national = function (number, countryCode, callback) {\n  return formatNumber(number, countryCode, PhoneNumberFormat.NATIONAL, callback);\n};\n\nmodule.exports = {\n  'validate': validate,\n  'e164': e164,\n  'intl': intl,\n  'national': national,\n  'phoneUtil': phoneUtil,\n  'formatNumber': formatNumber\n};","map":{"version":3,"sources":["/Users/max/Desktop/work/craftframeReactJS/craftframe/node_modules/libphonenumber/lib/index.js"],"names":["path","require","COMPILED","closureBasePath","join","__dirname","goog","Closure","CLOSURE_BASE_PATH","loadScript","phonenumbers","global","i18n","phoneUtil","PhoneNumberUtil","getInstance","PhoneNumber","PhoneNumberFormat","ValidationResult","ValidationErrors","Error","validateNumber","number","countryCode","error","result","potentialPhoneNumber","toString","replace","lastIndexOf","parse","quickReason","isPossibleNumberWithReason","IS_POSSIBLE","code","isValidNumber","e","formatNumber","numberFormat","callback","validNumber","format","validate","e164","E164","intl","INTERNATIONAL","national","NATIONAL","module","exports"],"mappings":"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","sourcesContent":["var path = require('path');\n\nCOMPILED = false;\nvar closureBasePath = path.join(__dirname, '/closure/goog/');\nvar goog = require('closure').Closure({CLOSURE_BASE_PATH: closureBasePath});\n\ngoog.require('goog.array');\ngoog.require('goog.proto2.PbLiteSerializer');\ngoog.require('goog.string');\ngoog.require('goog.string.StringBuffer');\ngoog.require('goog.json');\n\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/phonemetadata.pb.js');\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/phonenumber.pb.js');\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/metadata.js');\ngoog.loadScript(closureBasePath + 'i18n/phonenumbers/phonenumberutil.js');\n\nvar phonenumbers = goog.global.i18n.phonenumbers;\nvar phoneUtil = phonenumbers.PhoneNumberUtil.getInstance();\nvar PhoneNumber = phonenumbers.PhoneNumber;\nvar PhoneNumberFormat = phonenumbers.PhoneNumberFormat;\nvar ValidationResult = phonenumbers.PhoneNumberUtil.ValidationResult;\nvar ValidationErrors = phonenumbers.Error;\n\nvar validateNumber = function (number, countryCode) {\n  var error = null;\n  var result = null;\n\n  // Strip out everything that's not a phone number.\n  if (number) {\n    var potentialPhoneNumber = number.toString();\n    potentialPhoneNumber = potentialPhoneNumber.replace(/[^\\+0-9]/, '');\n    // E164 format numbers start with a plus sign.  If you have a plus sign\n    // anywhere else, this is not a phone number.  If you don't have a plus\n    // sign yet, don't worry, we'll give you one.\n    if (potentialPhoneNumber.lastIndexOf('+') <= 0) {\n      try {\n        potentialPhoneNumber = phoneUtil.parse(potentialPhoneNumber, countryCode);\n        var quickReason = phoneUtil.isPossibleNumberWithReason(potentialPhoneNumber);\n        if (quickReason !== ValidationResult.IS_POSSIBLE) {\n          for (var code in ValidationResult) {\n            if (ValidationResult[code] === quickReason) {\n              error = new Error(ValidationErrors[code]);\n            }\n          }\n          if (error === null) {\n            error = new Error('Invalid number (unspecified reason)');\n          }\n        } else {\n          if (phoneUtil.isValidNumber(potentialPhoneNumber)) {\n            result = potentialPhoneNumber\n          } else {\n            error = new Error('Invalid number');\n          }\n        }\n      } catch (e) {\n        error = e;\n      }\n    } else {\n      error = new Error('Not a phone number');\n    }\n  } else {\n    error = new Error('No number given');\n  }\n\n  if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n};\n\nvar formatNumber = function (number, countryCode, numberFormat, callback) {\n  var error = null;\n  var result = null;\n\n  try {\n    var validNumber = validateNumber(number, countryCode);\n    result = phoneUtil.format(validNumber, numberFormat);\n  }\n  catch (e) {\n    error = e\n  }\n\n  if (callback) {\n    callback(error, result);\n  } else if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n};\n\nvar validate = function (number, countryCode, callback) {\n  var error = null;\n  var result = null;\n\n  try {\n    var validNumber = validateNumber(number, countryCode);\n    result = validNumber instanceof PhoneNumber\n  }\n  catch (e) {\n    error = e\n  }\n\n  if (callback) {\n    callback(error, result);\n  } else if (error) {\n    throw error;\n  } else {\n    return result;\n  }\n};\n\nvar e164 = function (number, countryCode, callback) {\n  return formatNumber(number, countryCode, PhoneNumberFormat.E164, callback);\n};\n\nvar intl = function (number, countryCode, callback) {\n  return formatNumber(number, countryCode, PhoneNumberFormat.INTERNATIONAL, callback);\n};\n\nvar national = function(number, countryCode, callback) {\n  return formatNumber(number, countryCode, PhoneNumberFormat.NATIONAL, callback);\n};\n\nmodule.exports = {\n  'validate': validate,\n  'e164': e164,\n  'intl': intl,\n  'national': national,\n  'phoneUtil': phoneUtil,\n  'formatNumber': formatNumber\n};\n"]},"metadata":{},"sourceType":"script"}
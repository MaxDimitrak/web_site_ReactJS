{"ast":null,"code":"// Copyright 2011 Lukasz Mielicki <mielicki@gmail.com>.\n// All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n  @fileoverview Closure library wrapper for node.js.\n\n  To apply closure to global object:\n\n    require.('closure').Closure(global);\n\n  To create separate instance of closure\n\n    var goog = require.('closure').Closure();\n\n  By default closure library base.js is expected to be found in\n  ./closure-library/closure/goog/, to override this, say:\n\n    var goog =\n      require.('closure').Closure({CLOSURE_BASE_PATH: 'closure/goog/'});\n\n  To fetch additional closure dependencies:\n\n    goog.loadScript('my_deps.js');\n\n  To easily access other namespaces than goog either apply closure to\n  global object or provide own global object, i.e.\n\n    var root = {};\n    require.('closure').Closure(root);\n    //root.goog is goog namespace\n    //root.soy is soy namespace\n\n  Enjoy!\n\n*/\nvar vm = require('vm');\n\nvar fs = require('fs');\n\nvar assert = require('assert').ok;\n\nvar path = require('path');\n/**\n  Closure library constructor.\n  @param {Object=} opt_goog_global Optional object to be used as closure\n      global object.\n  @return {Object} goog namespace object.\n*/\n\n\nexports.Closure = function (opt_goog_global) {\n  /**\n    Internal closure global object.\n    @private\n  */\n  var goog_ = opt_goog_global || {}; // Apply closure library required settings.\n\n  set_defaults(goog_, {\n    CLOSURE_BASE_PATH: 'closure-library/closure/goog/',\n    CLOSURE_IMPORT_SCRIPT: load_script,\n    goog: {},\n    window: {\n      setTimeout: setTimeout,\n      clearTimeout: clearTimeout,\n      setInterval: setInterval,\n      clearInterval: clearInterval,\n      console: console\n    },\n\n    /**\n      execScript replacement\n    */\n    execScript: function (code) {\n      exec_script(code, 'execScript');\n      return null;\n    }\n  });\n  /**\n    Extends goog with loadScript (goog.importScript_ could be used instead,\n    but it's not part of API). Useful for loading dependency files.\n  */\n\n  goog_.goog.loadScript = load_script;\n  /**\n    Loads a closure script (CLOSURE_IMPORT_SCRIPT).\n    @param {string} filename The file to be loaded and executed.\n    @return {boolean} Always returns true.\n    @private\n  */\n\n  function load_script(filename) {\n    var code = fs.readFileSync(path.normalize(filename), 'utf8');\n    exec_script(code, filename);\n    return true;\n  }\n  /**\n    Executes given code in global scope or in a nifty wrapper providing\n    direct access to all global names, i.e.\n       (function(){with(this){ CODE }});\n     This is necassary to run closure scripts in same execution context while\n    having distinct global object.\n    @param {String} code Code to execute in closure global scope.\n    @param {String=} opt_filename Source file path to provide reference\n        in error messages.\n    @private\n  */\n\n\n  function exec_script(code, opt_filename) {\n    if (goog_ === global) {\n      // Run directly in global scope in case global object is used.\n      vm.runInThisContext(code, opt_filename);\n    } else {\n      // Use wrapper.\n      var wrapper = '(function(){with(this){' + code + '\\n}});';\n      var fn = vm.runInThisContext(wrapper, opt_filename);\n      fn.call(goog_);\n    }\n  }\n  /**\n    Applay defaults to target object if not yet there.\n    @param {Object} target Object to be extended.\n    @param {Object} defaults Source object.\n    @private\n  */\n\n\n  function set_defaults(target, defaults) {\n    for (var attr in defaults) {\n      if (target[attr] === undefined) {\n        target[attr] = defaults[attr];\n      }\n    }\n  } // Load base.js\n\n\n  var basepath = goog_.CLOSURE_BASE_PATH;\n  assert(basepath.slice(-1) === path.sep, \"CLOSURE_BASE_PATH must end with '\" + path.sep + \"'\");\n  load_script(basepath + 'base.js');\n  return goog_.goog;\n};","map":{"version":3,"sources":["/Users/max/Desktop/work/craftframeReactJS/craftframe/node_modules/closure/closure.js"],"names":["vm","require","fs","assert","ok","path","exports","Closure","opt_goog_global","goog_","set_defaults","CLOSURE_BASE_PATH","CLOSURE_IMPORT_SCRIPT","load_script","goog","window","setTimeout","clearTimeout","setInterval","clearInterval","console","execScript","code","exec_script","loadScript","filename","readFileSync","normalize","opt_filename","global","runInThisContext","wrapper","fn","call","target","defaults","attr","undefined","basepath","slice","sep"],"mappings":"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","sourcesContent":["// Copyright 2011 Lukasz Mielicki <mielicki@gmail.com>.\n// All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n  @fileoverview Closure library wrapper for node.js.\n\n  To apply closure to global object:\n\n    require.('closure').Closure(global);\n\n  To create separate instance of closure\n\n    var goog = require.('closure').Closure();\n\n  By default closure library base.js is expected to be found in\n  ./closure-library/closure/goog/, to override this, say:\n\n    var goog =\n      require.('closure').Closure({CLOSURE_BASE_PATH: 'closure/goog/'});\n\n  To fetch additional closure dependencies:\n\n    goog.loadScript('my_deps.js');\n\n  To easily access other namespaces than goog either apply closure to\n  global object or provide own global object, i.e.\n\n    var root = {};\n    require.('closure').Closure(root);\n    //root.goog is goog namespace\n    //root.soy is soy namespace\n\n  Enjoy!\n\n*/\nvar vm = require('vm');\nvar fs = require('fs');\nvar assert = require('assert').ok;\nvar path = require('path');\n\n\n/**\n  Closure library constructor.\n  @param {Object=} opt_goog_global Optional object to be used as closure\n      global object.\n  @return {Object} goog namespace object.\n*/\nexports.Closure = function(opt_goog_global) {\n\n  /**\n    Internal closure global object.\n    @private\n  */\n  var goog_ = opt_goog_global || {};\n\n  // Apply closure library required settings.\n  set_defaults(goog_, {\n    CLOSURE_BASE_PATH: 'closure-library/closure/goog/',\n    CLOSURE_IMPORT_SCRIPT: load_script,\n    goog: {},\n    window: {\n      setTimeout: setTimeout,\n      clearTimeout: clearTimeout,\n      setInterval: setInterval,\n      clearInterval: clearInterval,\n      console: console\n    },\n    /**\n      execScript replacement\n    */\n    execScript: function(code) {\n      exec_script(code, 'execScript');\n      return null;\n    }\n  });\n\n  /**\n    Extends goog with loadScript (goog.importScript_ could be used instead,\n    but it's not part of API). Useful for loading dependency files.\n  */\n  goog_.goog.loadScript = load_script;\n\n  /**\n    Loads a closure script (CLOSURE_IMPORT_SCRIPT).\n    @param {string} filename The file to be loaded and executed.\n    @return {boolean} Always returns true.\n    @private\n  */\n  function load_script(filename) {\n    var code = fs.readFileSync(  path.normalize( filename ), 'utf8');\n    exec_script(code, filename);\n    return true;\n  }\n\n  /**\n    Executes given code in global scope or in a nifty wrapper providing\n    direct access to all global names, i.e.\n\n      (function(){with(this){ CODE }});\n\n    This is necassary to run closure scripts in same execution context while\n    having distinct global object.\n    @param {String} code Code to execute in closure global scope.\n    @param {String=} opt_filename Source file path to provide reference\n        in error messages.\n    @private\n  */\n  function exec_script(code, opt_filename) {\n    if (goog_ === global) {\n      // Run directly in global scope in case global object is used.\n      vm.runInThisContext(code, opt_filename);\n    } else {\n      // Use wrapper.\n      var wrapper = '(function(){with(this){' + code + '\\n}});';\n      var fn = vm.runInThisContext(wrapper, opt_filename);\n      fn.call(goog_);\n    }\n  }\n\n  /**\n    Applay defaults to target object if not yet there.\n    @param {Object} target Object to be extended.\n    @param {Object} defaults Source object.\n    @private\n  */\n  function set_defaults(target, defaults) {\n    for (var attr in defaults) {\n      if (target[attr] === undefined) {\n        target[attr] = defaults[attr];\n      }\n    }\n  }\n\n  // Load base.js\n  var basepath = goog_.CLOSURE_BASE_PATH;\n  assert(basepath.slice(-1) === path.sep, \"CLOSURE_BASE_PATH must end with '\" + path.sep + \"'\");\n\n  load_script(basepath + 'base.js');\n\n  return goog_.goog;\n};\n"]},"metadata":{},"sourceType":"script"}